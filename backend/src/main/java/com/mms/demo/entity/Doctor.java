package com.mms.demo.entity;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import io.micrometer.common.lang.NonNull;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Pattern;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;


/**
 * The Doctor class represents a table of the same name in the database. It encapsulates all the
 * information related to a doctor that the system accepts. The entries for the doctor class in the
 * DBMS are handled by the admin.
 * <p>
 * Supports a Builder() as well as a toBuilder(), which are the preferred methods of constructing
 * objects of this class.
 * 
 * @author Mananveer Singh
 */
@Setter
@Getter
@AllArgsConstructor
@NoArgsConstructor
@Builder(toBuilder = true)
@EqualsAndHashCode
@Entity
@ToString
@Table(name = "DOCTOR", schema = "MMSYSTEM")
public class Doctor {

    /**
     * The Primary Key. Autogenerated by the DBMS on the creation of an entry.
     *
     */
    @Id
    @Column(name = "doctor_id")
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    /**
     * The full name of the doctor.
     */
    @NonNull
    @Column(name = "doctor_name", nullable = false)
    private String name;

    /**
     * Gender of the doctor. 'M' for male, 'F' for female. Left empty to signify any other.
     */
    @Column(name = "doctor_gender")
    @Pattern(regexp = "M|F")
    private String gender;


    /**
     * Age of the doctor.
     */
    @Column(name = "doctor_age", nullable = false)
    @Min(0)
    private Integer age;

    /**
     * Email address of the doctor.
     */
    @NonNull
    @Column(name = "doctor_email", length = 384, unique = true)
    @Email
    private String email;

    /**
     * Phone number of the doctor.
     */
    @Column(name = "doctor_phone", length = 14, nullable = false, unique = true)
    private String phone;

    /**
     * Speciality of the doctor. Requires a reference to an already existing entry.
     *
     */
    @ManyToOne(fetch = FetchType.EAGER, optional = false, cascade = {CascadeType.DETACH})
    @JoinColumn(nullable = false, referencedColumnName = "speciality_id")
    private Speciality speciality;

    /**
     * The timestamp marking when the doctor was successfully registered
     */
    @Column(name = "doctor_registration_timestamp", nullable = false)
    @Builder.Default
    private LocalDateTime stamp = LocalDateTime.now().truncatedTo(ChronoUnit.SECONDS);

    @Column(name = "doctor_rating_count", nullable = false)
    @Builder.Default
    private Long ratingCount = 0L;

    @Column(name = "doctor_rating_sum", nullable = false)
    @Builder.Default
    private Long ratingSum = 0L;
}
